{
  "service": {
    "service": "lambda-test",
    "serviceObject": {
      "name": "lambda-test"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.8",
      "stage": "dev",
      "region": "us-east-2",
      "bearerToken": "",
      "lambdaHashingVersion": "20201221",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem"
          ],
          "Resource": {
            "Fn::GetAtt": [
              "KeyValuesDynamoDBTable",
              "Arn"
            ]
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:StartExecution"
          ],
          "Resource": [
            "*"
          ]
        }
      ],
      "environment": {
        "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
        "STATE_MACHINE": "arn:aws:states:us-east-2:#{AWS::AccountId}:stateMachine:myStateMachineLinks"
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-hello"
            }
          },
          "FuncLinkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-funcLink"
            }
          },
          "FuncUnderscorejobsUnderscoreallLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_jobs_all"
            }
          },
          "FuncUnderscorewebsitesUnderscoreallLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_websites_all"
            }
          },
          "JobUnderscorebyUnderscoreidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-job_by_id"
            }
          },
          "FuncUnderscorewebsiteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_website"
            }
          },
          "FuncUnderscoretwitterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_twitter"
            }
          },
          "FuncUnderscorerssLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_rss"
            }
          },
          "FuncUnderscoreresultUnderscoreprocessingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-test-dev-func_result_processing"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "lambda-test",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lambda-test-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lambda-test-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "lambda-test",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "handler.hello",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "FuncLinkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "func_link.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-funcLink",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncLinkLogGroup"
            ]
          },
          "FuncUnderscorejobsUnderscoreallLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "jobs_all.lambda_jobs_get_all",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_jobs_all",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscorejobsUnderscoreallLogGroup"
            ]
          },
          "FuncUnderscorewebsitesUnderscoreallLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "websites_all.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_websites_all",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscorewebsitesUnderscoreallLogGroup"
            ]
          },
          "JobUnderscorebyUnderscoreidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "job_by_id.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-job_by_id",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JobUnderscorebyUnderscoreidLogGroup"
            ]
          },
          "FuncUnderscorewebsiteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "func_website.func_website",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_website",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscorewebsiteLogGroup"
            ]
          },
          "FuncUnderscoretwitterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "func_twitter.func_twitter",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_twitter",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscoretwitterLogGroup"
            ]
          },
          "FuncUnderscorerssLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "func_rss.func_rss",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_rss",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscorerssLogGroup"
            ]
          },
          "FuncUnderscoreresultUnderscoreprocessingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z/lambda-test.zip"
              },
              "Handler": "func_result_processing.func_result_processing",
              "Runtime": "python3.8",
              "FunctionName": "lambda-test-dev-func_result_processing",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "lambda-test-dev-Table_jobs",
                  "STATE_MACHINE": {
                    "Fn::Sub": "arn:aws:states:us-east-2:${AWS::AccountId}:stateMachine:myStateMachineLinks"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FuncUnderscoreresultUnderscoreprocessingLogGroup"
            ]
          },
          "HelloLambdaVersion5ngVpP9a9b2GNmDoN4QPHgy9p3Uz1vaidydgXCY0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncLinkLambdaVersionje2bW853huEVkNhpmdD485agtOAyV0W5AO4p0rZbYkQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncLinkLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscorejobsUnderscoreallLambdaVersiongP5iGgi2EXd8cdwMs3aiUiigMzGwOBOBuTpKZY9lXNM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscorejobsUnderscoreallLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscorewebsitesUnderscoreallLambdaVersionL9Qawu76H6iabchftGJVAw95fLZgMEOSmOTccjmffVE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscorewebsitesUnderscoreallLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "JobUnderscorebyUnderscoreidLambdaVersioncpRhHu30ggailxCxudFUms5K4I2HYsnTDV4Cg8Cq9M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JobUnderscorebyUnderscoreidLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscorewebsiteLambdaVersiondPBXPEVK6PAyJVh26yTHD0Wr9LJSNiekVSKFhBRTLIM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscorewebsiteLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscoretwitterLambdaVersionFGnxQ4Q4DnTktDaFUHy8FUt0xBPdiTpPxeVD5Ues": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscoretwitterLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscorerssLambdaVersionCqSdsYZcZspf04RY0uAHCf4OiGsCefwPtNXaFTVCD8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscorerssLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "FuncUnderscoreresultUnderscoreprocessingLambdaVersionKyKIxnZvRVEEOxUPaWTLd7B1L0SeEbHHTb8fHFPo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FuncUnderscoreresultUnderscoreprocessingLambdaFunction"
              },
              "CodeSha256": "Kkgqyv72rWoMuWp1o2rqR/WXhxn6+lQuGsjNjOG4Mns="
            }
          },
          "MyStateMachineLinksRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "states.us-east-2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-us-east-2-lambda-test-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "FuncUnderscorewebsiteLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "FuncUnderscorewebsiteLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FuncUnderscoretwitterLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "FuncUnderscoretwitterLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FuncUnderscorerssLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "FuncUnderscorerssLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FuncUnderscoreresultUnderscoreprocessingLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "FuncUnderscoreresultUnderscoreprocessingLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "MyStateMachineLinks": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"StartAt\": \"funcLink\",\n  \"States\": {\n    \"funcLink\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.linkType\",\n          \"StringEquals\": \"Website\",\n          \"Next\": \"funcWebsite\"\n        },\n        {\n          \"Variable\": \"$.linkType\",\n          \"StringEquals\": \"Twitter\",\n          \"Next\": \"funcTwitter\"\n        },\n        {\n          \"Variable\": \"$.linkType\",\n          \"StringEquals\": \"RSS\",\n          \"Next\": \"funcRSS\"\n        }\n      ]\n    },\n    \"funcWebsite\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${e505821e0fb3a580c934eb5365623080}\",\n      \"Next\": \"Webhook\"\n    },\n    \"funcTwitter\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${cb2a1192bbcc378dfabe2f02b2f64273}\",\n      \"Next\": \"Webhook\"\n    },\n    \"funcRSS\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${aeb45d180ef03f1131ed075d23c05865}\",\n      \"Next\": \"Webhook\"\n    },\n    \"Webhook\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${591e6f3f0af5f40c7830faeff04ae535}\",\n      \"End\": true\n    }\n  }\n}",
                  {
                    "e505821e0fb3a580c934eb5365623080": {
                      "Fn::GetAtt": [
                        "FuncUnderscorewebsiteLambdaFunction",
                        "Arn"
                      ]
                    },
                    "cb2a1192bbcc378dfabe2f02b2f64273": {
                      "Fn::GetAtt": [
                        "FuncUnderscoretwitterLambdaFunction",
                        "Arn"
                      ]
                    },
                    "aeb45d180ef03f1131ed075d23c05865": {
                      "Fn::GetAtt": [
                        "FuncUnderscorerssLambdaFunction",
                        "Arn"
                      ]
                    },
                    "591e6f3f0af5f40c7830faeff04ae535": {
                      "Fn::GetAtt": [
                        "FuncUnderscoreresultUnderscoreprocessingLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "MyStateMachineLinksRole",
                  "Arn"
                ]
              },
              "StateMachineName": "myStateMachineLinks"
            },
            "DependsOn": [
              "MyStateMachineLinksRole"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-lambda-test",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "jobs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobsJobidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "PathPart": "{job_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobsall": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "jobs_all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebsites": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "websites",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodJobsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FuncLinkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "$input.json(\"$\")",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            }
          },
          "ApiGatewayMethodJobsallGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsall"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FuncUnderscorejobsUnderscoreallLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodWebsitesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebsites"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FuncUnderscorewebsitesUnderscoreallLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            }
          },
          "ApiGatewayMethodJobsJobidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsJobidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "JobUnderscorebyUnderscoreidLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "{\"job_id\": \"$input.params(\"job_id\")\"}",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            }
          },
          "ApiGatewayDeployment1614615702625": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodJobsPost",
              "ApiGatewayMethodJobsallGet",
              "ApiGatewayMethodWebsitesGet",
              "ApiGatewayMethodJobsJobidVarGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FuncLinkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FuncLinkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FuncUnderscorejobsUnderscoreallLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FuncUnderscorejobsUnderscoreallLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FuncUnderscorewebsitesUnderscoreallLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FuncUnderscorewebsitesUnderscoreallLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JobUnderscorebyUnderscoreidLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JobUnderscorebyUnderscoreidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "KeyValuesDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "lambda-test-dev-Table_jobs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "job_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "job_id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersion5ngVpP9a9b2GNmDoN4QPHgy9p3Uz1vaidydgXCY0"
            }
          },
          "FuncLinkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncLinkLambdaVersionje2bW853huEVkNhpmdD485agtOAyV0W5AO4p0rZbYkQ"
            }
          },
          "FuncUnderscorejobsUnderscoreallLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscorejobsUnderscoreallLambdaVersiongP5iGgi2EXd8cdwMs3aiUiigMzGwOBOBuTpKZY9lXNM"
            }
          },
          "FuncUnderscorewebsitesUnderscoreallLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscorewebsitesUnderscoreallLambdaVersionL9Qawu76H6iabchftGJVAw95fLZgMEOSmOTccjmffVE"
            }
          },
          "JobUnderscorebyUnderscoreidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JobUnderscorebyUnderscoreidLambdaVersioncpRhHu30ggailxCxudFUms5K4I2HYsnTDV4Cg8Cq9M"
            }
          },
          "FuncUnderscorewebsiteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscorewebsiteLambdaVersiondPBXPEVK6PAyJVh26yTHD0Wr9LJSNiekVSKFhBRTLIM"
            }
          },
          "FuncUnderscoretwitterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscoretwitterLambdaVersionFGnxQ4Q4DnTktDaFUHy8FUt0xBPdiTpPxeVD5Ues"
            }
          },
          "FuncUnderscorerssLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscorerssLambdaVersionCqSdsYZcZspf04RY0uAHCf4OiGsCefwPtNXaFTVCD8"
            }
          },
          "FuncUnderscoreresultUnderscoreprocessingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FuncUnderscoreresultUnderscoreprocessingLambdaVersionKyKIxnZvRVEEOxUPaWTLd7B1L0SeEbHHTb8fHFPo"
            }
          },
          "MyStateMachineLinksArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "MyStateMachineLinks"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "apiGatewayServiceProxies": [
        {
          "dynamodb": {
            "path": "jobs/{job_id}",
            "method": "get",
            "tableName": {
              "Ref": "Table_jobs"
            },
            "hashKey": {
              "queryStringParam": "job_id",
              "attributeType": "S"
            },
            "action": "GetItem"
          }
        }
      ]
    },
    "plugins": [
      "serverless-pseudo-parameters",
      "serverless-step-functions"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "handler.hello",
        "events": [
          {
            "http": {
              "path": "hello",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-test-dev-hello",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersion5ngVpP9a9b2GNmDoN4QPHgy9p3Uz1vaidydgXCY0"
      },
      "funcLink": {
        "handler": "func_link.lambda_handler",
        "events": [
          {
            "http": {
              "path": "jobs",
              "method": "post",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "$input.json(\"$\")"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "name": "lambda-test-dev-funcLink",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncLinkLambdaVersionje2bW853huEVkNhpmdD485agtOAyV0W5AO4p0rZbYkQ"
      },
      "func_jobs_all": {
        "handler": "jobs_all.lambda_jobs_get_all",
        "events": [
          {
            "http": {
              "path": "jobs_all",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-test-dev-func_jobs_all",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscorejobsUnderscoreallLambdaVersiongP5iGgi2EXd8cdwMs3aiUiigMzGwOBOBuTpKZY9lXNM"
      },
      "func_websites_all": {
        "handler": "websites_all.lambda_handler",
        "events": [
          {
            "http": {
              "path": "websites",
              "method": "get",
              "integration": "AWS",
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"funcLink\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "lambda-test-dev-func_websites_all",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscorewebsitesUnderscoreallLambdaVersionL9Qawu76H6iabchftGJVAw95fLZgMEOSmOTccjmffVE"
      },
      "job_by_id": {
        "handler": "job_by_id.lambda_handler",
        "events": [
          {
            "http": {
              "path": "jobs/{job_id}",
              "method": "get",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "{\"job_id\": \"$input.params(\"job_id\")\"}"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"funcLink\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "lambda-test-dev-job_by_id",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "JobUnderscorebyUnderscoreidLambdaVersioncpRhHu30ggailxCxudFUms5K4I2HYsnTDV4Cg8Cq9M"
      },
      "func_website": {
        "handler": "func_website.func_website",
        "events": [],
        "name": "lambda-test-dev-func_website",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscorewebsiteLambdaVersiondPBXPEVK6PAyJVh26yTHD0Wr9LJSNiekVSKFhBRTLIM"
      },
      "func_twitter": {
        "handler": "func_twitter.func_twitter",
        "events": [],
        "name": "lambda-test-dev-func_twitter",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscoretwitterLambdaVersionFGnxQ4Q4DnTktDaFUHy8FUt0xBPdiTpPxeVD5Ues"
      },
      "func_rss": {
        "handler": "func_rss.func_rss",
        "events": [],
        "name": "lambda-test-dev-func_rss",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscorerssLambdaVersionCqSdsYZcZspf04RY0uAHCf4OiGsCefwPtNXaFTVCD8"
      },
      "func_result_processing": {
        "handler": "func_result_processing.func_result_processing",
        "events": [],
        "name": "lambda-test-dev-func_result_processing",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "FuncUnderscoreresultUnderscoreprocessingLambdaVersionKyKIxnZvRVEEOxUPaWTLd7B1L0SeEbHHTb8fHFPo"
      }
    },
    "resources": {
      "Resources": {
        "KeyValuesDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "lambda-test-dev-Table_jobs",
            "AttributeDefinitions": [
              {
                "AttributeName": "job_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "job_id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "stepFunctions": {
        "stateMachines": {
          "testLinksStepfunc1": {
            "name": "myStateMachineLinks",
            "definition": {
              "StartAt": "funcLink",
              "States": {
                "funcLink": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.linkType",
                      "StringEquals": "Website",
                      "Next": "funcWebsite"
                    },
                    {
                      "Variable": "$.linkType",
                      "StringEquals": "Twitter",
                      "Next": "funcTwitter"
                    },
                    {
                      "Variable": "$.linkType",
                      "StringEquals": "RSS",
                      "Next": "funcRSS"
                    }
                  ]
                },
                "funcWebsite": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "func_website",
                      "Arn"
                    ]
                  },
                  "Next": "Webhook"
                },
                "funcTwitter": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "func_twitter",
                      "Arn"
                    ]
                  },
                  "Next": "Webhook"
                },
                "funcRSS": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "func_rss",
                      "Arn"
                    ]
                  },
                  "Next": "Webhook"
                },
                "Webhook": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "func_result_processing",
                      "Arn"
                    ]
                  },
                  "End": true
                }
              }
            }
          }
        }
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "stepFunctions": {
      "stateMachines": {
        "testLinksStepfunc1": {
          "name": "myStateMachineLinks",
          "definition": {
            "StartAt": "funcLink",
            "States": {
              "funcLink": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.linkType",
                    "StringEquals": "Website",
                    "Next": "funcWebsite"
                  },
                  {
                    "Variable": "$.linkType",
                    "StringEquals": "Twitter",
                    "Next": "funcTwitter"
                  },
                  {
                    "Variable": "$.linkType",
                    "StringEquals": "RSS",
                    "Next": "funcRSS"
                  }
                ]
              },
              "funcWebsite": {
                "Type": "Task",
                "Resource": "${e505821e0fb3a580c934eb5365623080}",
                "Next": "Webhook"
              },
              "funcTwitter": {
                "Type": "Task",
                "Resource": "${cb2a1192bbcc378dfabe2f02b2f64273}",
                "Next": "Webhook"
              },
              "funcRSS": {
                "Type": "Task",
                "Resource": "${aeb45d180ef03f1131ed075d23c05865}",
                "Next": "Webhook"
              },
              "Webhook": {
                "Type": "Task",
                "Resource": "${591e6f3f0af5f40c7830faeff04ae535}",
                "End": true
              }
            }
          }
        }
      },
      "activities": []
    },
    "artifact": "/home/martin/Desktop/Python/Serverless/aws_serverless_project/.serverless/lambda-test.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/lambda-test/dev/1614615706376-2021-03-01T16:21:46.376Z",
    "artifact": "lambda-test.zip"
  }
}